name = "o3";
file_extensions[] = "o3";
// constants
__OGONE \= (\b)(use|as|require|from|import|define)(\b)
__PATH \= (\@)((\/)([\w])+)+(.o3)
__PROTO_KEYWORDS \= (\b)(def|before\-each|default|case|break)(\b)
__PROTO_ENTITIES \= (\b)(Async|Test|Store|Router|Refs)(\b)

// contexts
contexts [] {
   main: context {
      :include "html";
      :include "double_quote";
      :include "single_quote";
      : include "punctuation";
      :include "text_basic";
      // use pattern
      : pattern {
         regex \= (use\s+)(\@)([^\s]+)+(\s+as)
         styles [] = .keyword,.path,.path, .keyword;
      }
      // require pattern
      : inline_push {
         regex \= (require)
         styles[] = .keyword;
         : pop {
            regex \= (as)
            styles [] = .keyword;
         }
         :include "punctuation";
         :include "property";
      }
      // import pattern
      : inline_push {
         regex \= (import)
         styles[] = .keyword;
         : pop {
            regex \= (from)
            styles [] = .keyword;
         }
         :include "keyword";
         :include "punctuation";
         :include "property";
      }
      :include "keyword";
   }
   punctuation: context {
      :pattern {
         regex \= ([^\w\s\d\n])
         styles [] = .punctuation;
      }
   }
   property: context {
      :pattern {
         regex \= (\w)
         styles [] = .property;
      }
   }
   keyword: context {
         // keyword pattern
      : pattern {
         regex \= $${__OGONE}
         styles [] = .keyword;
      }
   }
   html: context {
      :inline_push {
         regex \= (?:\<)
         styles[] = .punctuation;
         :pop {
            regex \= (?<=\>)
            styles[] = .html;
         }
         :include "template";
         :include "system_proto";
         :include "system";
         :include "component";
         :include "tagname";
         :include "attribute_normal";
         :include "attribute_flag_evaluated";
         :include "attribute_prop_evaluated";
         :include "flag";
         :include "attribute_boolean";
         :include "double_quote";
         :include "punctuation";
      }
   }
   text_basic: context {
      :inline_push {
         regex \= (?<=\>)
         styles[] = .punctuation;
         :pop {
            regex \= (?=<)
            styles[] = .punctuation;
         }
         :include "template";
         :pattern {
            regex \= ([\s\S])
            styles[] = .text;
         }
      }
   }
   template: context {
      :inline_push {
         regex \= (\$\{)
         styles[] = .template_begin;
         : pop {
            regex \= (\})
            styles[] = .template_end;
         }
         :include "evaluated";
      }
   }
   // for typescript purposes
   evaluated: context {
      :pattern {
         regex \= ([\s\S])
         styles[] = .evaluated_typescript;
      }
   }

   typescript: context {
      :inline_push {
         regex \= (\b(default|case|before-each))
         styles[] = .typescript;
         :pop {
            regex \= (?=(\bcase|\bdefault|\bbefore-each\s+\:|\bdef|\<\/proto))
            styles[] = .typescript;
         }
         :include "keyword_proto_api";
         :include "keyword_proto";
         :include "execute_default";
         :pattern {
            regex \= ([\S]+)
            styles[] = .typescript;
         }

      }
   }
   execute_default: context {
      :inline_push {
         regex \= (execute)
         styles [] = .keyword;
         :pop {
            regex \= (default\s*)(?=(\;){0,1})
            styles [] = .keyword;
         }
         :include "punctuation";
      }
   }
   // for attributes of elements
   attribute_boolean: context {
      :inline_push {
         regex \= ([\w][\w]+)(\s)
         styles[] = .attribute;
         default_style = .attribute
         :pop  {
            regex \= ([\s\b])
            styles[] = .attribute;
         }
      }
   }
   attribute_normal: context {
      :inline_push {
         regex \= (\w[^\s]+)(\=)(\")
         styles[] = .attribute, .punctuation, .quote;
         default_style = .attribute_value
         :pop {
            regex \= (?<=[^\\])(")
            styles[] = .quote;
         }
      }
   }
   attribute_flag_evaluated: context {
      :push {
         regex \= (\-{2}[^\s]+)(\=\")
         styles[] = .flag, .punctuation;
         context[] = attribute_evaluated_inside;
      }
   }
   attribute_prop_evaluated: context {
      :push {
         regex \= ([\:][^\s]+)(\=\")
         styles[] = .flag, .punctuation;
         context[] = attribute_evaluated_inside;
      }
   }
   attribute_evaluated_inside: context {
      :pop {
         regex \= (?<=[^\\])(\")
         styles[] = .punctuation;
      }
      :include "evaluated";
   }
   flag: context {
      :pattern {
         regex \= (\-{2}[^\s\=\>]+)
         styles[] = .flag;
      }
   }

   // for strings
   lit_quote: context {
      :inline_push {
         regex \= (\`)
         styles[] = .quote;
         :pop {
            regex \= (?<=[^\\])(\`)
            styles[] = .quote;
         }
         :pattern {
            regex \= ([^`$]+)
            styles[] = .quote;
         }
         :include "template";
      }
   }
   double_quote: context {
      :inline_push {
         regex \= (")
         styles[] = .quote;
         default_style = .quote
         :pop {
            regex \= (?<=([^\\]))(")
            styles[] = .quote;
         }
      }
   }
   single_quote: context {
      :inline_push {
         regex \= (')
         styles[] = .quote;
         default_style = .quote
         :pop {
            regex \= (?<=[^\\])(')
            styles[] = .quote;
         }
      }
   }

   // for system
   system: context {
      : pattern {
         regex \= (?<=\<(\/){0,1})(proto|test|style)
         styles[] = .system;
      }
   }
   // system for proto
   system_proto: context {
      : inline_push {
         regex \= (?<=(\<proto))
         styles[] = .proto;
         : pop {
            regex \= (?=(\<\/proto))
            styles[] = .proto;
         }
         :include "system_attribute";
         :include "typescript";
         :include "keyword_proto";
         :include "def_proto";
      }
   }
   system_attribute: context {
      :inline_push {
        regex \= (?<=(\<(proto|test|style)))
        styles[]= .html;
        :pop {
            regex \= (?=\>)
            styles[]= .html;
        }
         :include "attribute_normal";
         :include "attribute_flag_evaluated";
         :include "attribute_prop_evaluated";
         :include "flag";
         :include "attribute_boolean";
         :include "punctuation";
      }
   }
   def_proto: context {
      :inline_push {
         regex \= (?<=(def\s*\:))
         styles[] = .keyword;
         default_style = .yml
         :pop {
            regex \= (?=(\b(break\s*\;)))
            styles[] = .keyword;
         }
      }
   }
   keyword_proto: context {
      : pattern {
         regex \= $${__PROTO_KEYWORDS}
         styles[] = .keyword_proto;
      }
   }
   keyword_proto_api: context {
      : pattern {
         regex \= $${__PROTO_ENTITIES}
         styles[] = .keyword_proto_api;
      }
   }
   // for elements or components
   component: context {
      : pattern {
         regex \= (?<=\<(\/){0,1})(([\w]+(\-([\w])+)+))
         styles[] = .component;
      }
   }
   tagname: context {
      : pattern {
         regex \= (?<=\<(\/){0,1})([\w]+)
         styles[] = .tagname;
      }
   }

   // numeric contexts
   digit: context {
      : pattern {
         regex \= (\b)(\d+|null|true|false|undefined|Infinity)
         styles[] = .digit;
      }
   }
}
// styles
styles [] {
   .keyword : style {
      color                 = purple
      bold                  = true
      ace_scope             = keyword
      textmate_scope        = keyword
      pygments_scope        = Keyword
   }
   .system : style {
      color                 = red
      bold                  = true
      ace_scope             = entity.name.tag.html
      textmate_scope        = entity.name.tag.html
      pygments_scope        = Name.Entity
   }
   .proto : style {
      color                 = blue
      bold                  = true
      ace_scope             = entity.name.tag.html
      textmate_scope        = entity.name.tag.html
      pygments_scope        = Name.Entity
   }
   .keyword_proto : style {
      color                 = purple
      ace_scope             = keyword
      textmate_scope        = keyword
      pygments_scope        = Keyword
   }
   .keyword_proto_api : style {
      color                 = cyan
      ace_scope             = entity
      textmate_scope        = entity
      pygments_scope        = Name.Entity
   }
   .component : style {
      color                 = purple
      bold                  = true
      ace_scope             = entity.name.tag.html
      textmate_scope        = entity.name.tag.html
      pygments_scope        = Name.Entity
   }
   .tagname : style {
      color     = purple
      bold                  = true
      ace_scope             = entity.name.tag.html
      textmate_scope        = entity.name.tag.html
      pygments_scope        = Name.Entity
   }
   .path : style {
      color     = grey
      ace_scope             = entity
      textmate_scope        = entity
      pygments_scope        = Name.Entity
   }
   .punctuation : style {
      color     = grey
      ace_scope             = punctuation
      textmate_scope        = punctuation
      pygments_scope        = Punctuation
   }
   .template_begin : style {
      color     = grey
      ace_scope             = punctuation.definition.template-expression.begin.ts
      textmate_scope        = punctuation.definition.template-expression.begin.ts
      pygments_scope        = Punctuation
   }
   .template_end : style {
      color     = grey
      ace_scope             = punctuation.definition.template-expression.end.ts
      textmate_scope        = punctuation.definition.template-expression.end.ts
      pygments_scope        = Punctuation
   }
   .property: style {
      color = grey
      bold = true
   }
   .quote: style {
      color = gold
   }
   .html: style {
      color = white
   }
   .yml: style {
      color = pink
   }
   .attribute: style {
      color = grey
      ace_scope             = entity.other.attribute-name.html
      textmate_scope        = entity.other.attribute-name.html
      pygments_scope        = Name.Entity
   }
   .flag: style {
      color = purple
      italic = true
   }
   .attribute_value: style {
      color = gold
      bold = true
      ace_scope             = string.quoted.double.html
      textmate_scope        = string.quoted.double.html
      pygments_scope        = Name.Entity
   }
   .text: style {
      color = grey
   }
   .digit: style {
      color = violet
   }
   .typescript: style {
      color= blue
      ace_scope             = source.ts
      textmate_scope        = source.ts
      pygments_scope        = Name.Entity
   }
   .evaluated_typescript: style {
      color= blue
      ace_scope             = meta.brace.round.ts
      textmate_scope        = meta.brace.round.ts
      pygments_scope        = Name.Entity
   }
}