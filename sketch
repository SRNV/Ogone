if (ev.type === 'load') {
  const app = document.querySelector(ev.querySelector);
  app.setAttribute(ev.renderUUID, '');
  app.insertAdjacentHTML('beforeend', ev.html);
}
if (ev.type === 'bind') {
  const el = document.querySelector(ev.querySelector);
  if (el && el.value !== ev.value) {
    el.value = ev.value;
  }
}
if (ev.type === 'style') {
  const style = document.querySelector('style[data-app-style]');
  if (!Ogone.styles.includes(ev.cssUUID)) {
    Ogone.styles.push(ev.cssUUID);
    style.insertAdjacentHTML('beforeend', ev.css);
  }
}
if (ev.type === 'render') {
  if (ev.on) {
    Ogone.render.push(ev);
  }
}
if (ev.renderUUID && ev.type !== 'text') {
  Ogone.render
    .filter((chunk) => chunk.on === ev.renderUUID)
    .forEach((chunk) => {
      const subEl = document.querySelector(chunk.querySelector);
      if (subEl) {
        subEl.innerHTML = chunk.html;
      }
    });
}
if (ev.type === 'text') {
  const el = document.querySelector(ev.querySelector);
  if (el) {
    const text = el.childNodes[ev.id];
    if (text) {
      text.data = ev.data;
    }
  }
}
if (ev.type === 'event') {
  Ogone.events.push({
    ...ev,
    valid: true,
  });
}
Ogone.events = Ogone.events.filter(chunk => chunk.valid);
Ogone.events
  .forEach((chunk) => {
    if (chunk.on !== ev.renderUUID) return;
    const subEl = document.querySelector(chunk.querySelector);
    if (subEl) {
      let event = chunk.event;
      switch(chunk.event) {
        case 'model':
          event = 'input';
          break;
      }
      subEl.addEventListener(event, (evt) => {
        if (appWS.readyState !== 1) return;
        if (evt.target === subEl) {
          if (chunk.event === 'model') {
            appWS.send(`${chunk.event}:${chunk.querySelector}:${subEl.value}`);
            return;
          }
          appWS.send(`${chunk.event}:${chunk.querySelector}`);
        }
      });
      chunk.valid = false;
    }
  });