import component GithubBadges from '../atoms/github-badges.o3';
import component OBtn from '../atoms/button.o3';

<BrandComponent>
  <template>
    <!-- style is by default scoped, use the attribute global if you want to make the style general -->
    <style --keyframes={[
      get('fade-in-down', { time: 2, style: 'ease-in' }),
      ]}>
      .container {
        transition: 0.5s ease;
        filter: drop-shadow(-10px 10px 10px #00000055);
        background: white;
        width: min-content;
        margin: auto;
        border-radius: 6px;
        overflow: hidden;
        position: relative;
        z-index: 5;
      }
      .brand {
        width: fit-content;
        margin: auto;
      }
      .brand__message {
        text-align: center;
        font-size: 24pt;
        text-rendering: optimizeSpeed;
        color: #b9b9b9;
        margin: 37px;
      }
      .logo {
        width: 400px;
        height: auto;
        margin: 0px 333px;
        @media screen and (max-width: 1170px) {
          width: 30vw;
          margin: 0px 15vw;
        }
      }
      .links {
        background: #f1f1f1;
        box-shadow: inset -3px 10px 8px #00000027, inset 10px -9px 11px #ffffff;
        padding: 30px;
        border-radius: 7px;
        margin: 5px;
      }
      .brand_big {
        display: inline-block;
        overflow: hidden;
        text-align: initial;
        white-space: nowrap;
        font-size: 132pt;
        color: #e3e3e3;
        transform: rotateZ(90deg);
        transform-origin: top left;
        position: fixed;
        left: 64vw;
        top: 0px;
        width: 100vh;
        font-weight: 700;
        z-index: 4;
        height: 100vh;
      }
      ul {
        column-count: 3;
      }

    </style>
    <div
      ref="container"
      --if={this.display}
      --event:animationend:fade-out-bottom
      --class={{
        container: true,
        ['fade-in-bottom']: this.visible,
        ['fade-out-bottom']: !this.visible, }}>
      <div class="brand">
        <img
          --await
          class="logo"
          src="https://raw.githubusercontent.com/SRNV/Ogone/feat/use-deno-bundle/fix-types/one-ogone-browser-and-deno/src/public/ogone.svg"/>
      </div>
      <div class="brand__message fade-in-down">
        ${this.message}
      </div>
      <p align="center">
        <OBtn
          --click:fade-out:exit
          text={'Getting Started'}/>
      </p>
      <GithubBadges />
      <div class="links">
        <ul>
          <li --for={item of this.links}>
            <a href={item.href}>
              ${item.label}
            </a>
          </li>
        </ul>
      </div>
    </div>
    <marquee
      --if={this.display}
      --event:animationend:fade-out
      ref="marquee"
      truespeed
      scrolldelay="23"
      class="brand_big">
      Ogone - Web Components Compiler for Deno
    </marquee>
  </template>
  <proto type="async">
    declare:
      public visible: boolean = true;
      public display: boolean = true;
      public message: string = 'Welcome to your first Ogone application.';
      public links: { label: string; href: string }[] = [
        {
          label: 'Repository',
          href: 'https://github.com/SRNV/Ogone',
        },
        {
          label: 'Introduction',
          href: 'https://github.com/SRNV/Ogone/blob/master/docs/introduction.md',
        },
        {
          label: 'Examples',
          href: 'https://github.com/SRNV/Ogone/blob/master/docs/examples.md',
        },
        {
          label: 'Learn How to use Ogone',
          href: 'https://dev.to/srnv/deno-learn-how-to-use-ogone-486c',
        },
        {
          label: 'Ogone\'s JSX',
          href: 'https://dev.to/srnv/deno-ogone-s-jsx-output-1k8l',
        },
      ];
    case 'event:animationend:fade-out-bottom':
      const [marquee] = Refs.marquee
      marquee.classList.add('fade-out');
      break;
    case 'event:animationend:fade-out':
      this.display = false;
      Ogone.router.go('/ogone');
      break;
    case 'click:fade-out:exit':
      this.visible = false;
      break;
    default:
      this.display = true;
      Async.resolve();
  </proto>
</BrandComponent>