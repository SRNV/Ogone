use @/examples/app/components/menu/tree-recursive-button.o3 as 'tree-recursive'
use @/examples/app/components/scroll.o3 as 'scroll-component'

require item as {
  route: string;
  status?: string;
  name?: string;
  children: ({
    status?: string;
    name: string;
    route: string;
    children: any[]
  })[];
};

<template>
  <div class="container">
    <div class="title" --click:toggle --router-go="this.item.route">
      <span>
      ${this.item.name}
      </span>
      <span --class="!this.item.children && this.item.status ? `status ${this.item.status}` : ''">
        ${!this.item.children && this.item.status ? this.item.status : ''}
      </span>
      <span --if="this.item.children && !this.openTree"> > </span>
      <span --else-if="this.item.children && this.openTree"> < </span>
    </div>
    <div
      class="child"
      --if="this.item.children"
      --class="{ 'child-open': this.openTree }">
      <scroll-component>
        <tree-recursive
          --for="this.item.children as (child)"
          :item="child"></tree-recursive>
      </scroll-component>
    </div>
  </div>
</template>

<proto>
  declare:
    public openTree: boolean = false;
  case 'click:toggle':
    this.openTree = !this.openTree
  break;
</proto>

<style>
  .container {
    color: var(--o-grey);
    display: flex;
    flex-direction: column;
    flex: 1;
  }
  .child {
    padding-left: 30px;
    height: 0;
    overflow: hidden;
    transition: flex 0.5s ease;
    background: #00000034;
  }
  .child-open {
    flex: 1;
  }
  .title {
    padding-bottom: 10px;
    border-bottom: 1px solid #555;
    padding: 5px;
    cursor: pointer;
    flex: 1;
    display: flex;
    justify-content: space-between;
    &:hover {
      background: var(--o-primary);
      color: white;
    }
  }
  .child .title {
    border-left: 1px solid #555;
  }
  .status {
    display: list-item;
  }
  .ok {
    color: var(--o-success)
  }
  .todo {
    color: var(--o-error)
  }
  .in-progress {
    color: var(--o-info)
  }
</style>
